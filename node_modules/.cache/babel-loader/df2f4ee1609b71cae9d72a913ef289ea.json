{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/sazib/desktop/lab38/src/components/todo/todo.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport useFetch from '../../hooks/fetch.js';\nimport TodoForm from './form.js';\nimport TodoList from './list.js';\nimport TodoItem from './item.js';\nimport './todo.scss'; // Should be in .env as REACT_APP_API_SERVER instead of hard coded\n\nconst todoAPI = 'https://localhost/api/v1/todos';\n\nconst ToDo = () => {\n  const [todoList, setToDoList] = useState([]); // request() is a function from the hook that takes a url and options as a parameter object\n  // response, error are data that the hook sets as state (letting us re-render here) when it's done fetchign data\n  // isLoading is a flag set by the hook to let you change display if we're loading data\n  // eslint-disable-next-line no-unused-vars\n\n  const {\n    request,\n    response,\n    error,\n    isLoading\n  } = useFetch(); // Notice how all of the event handlers set a request object and call request() with it?\n  // the hook has a useEffect() that's tied to changes in the request object, so as these\n  // change that bit of state in the hook, api calls happen\n\n  const _addItem = item => {\n    const addRequest = {\n      url: todoAPI,\n      options: {\n        method: 'post',\n        body: JSON.stringify(item)\n      }\n    };\n    request(addRequest);\n  };\n\n  const _deleteItem = id => {\n    const deleteRequest = {\n      url: `${todoAPI}/${id}`,\n      options: {\n        method: 'delete'\n      }\n    };\n    request(deleteRequest);\n  };\n\n  const _toggleCompleted = id => {\n    let item = todoList.filter(i => i.id === id)[0] || {};\n    item.completed = !item.completed;\n    const updateRequest = {\n      url: `${todoAPI}/${id}`,\n      options: {\n        method: 'put',\n        body: JSON.stringify(item)\n      }\n    };\n    request(updateRequest);\n  };\n\n  const _getAll = React.useCallback(() => {\n    const req = {\n      url: todoAPI,\n      options: {\n        method: 'get'\n      }\n    };\n    request(req);\n  }, [request]); // The function to re-fetch data so the display is current\n  // Called on intial load and afer every write operation\n  // On mount ... get the list\n\n\n  useEffect(() => {\n    _getAll();\n  }, [_getAll]); //  Set the full state if it's in the response or re-fetch anytime the response is updated\n\n  useEffect(() => {\n    // Anytime we get a list, update our sate\n    if (response.length >= 0) {\n      setToDoList(response);\n    } // Otherwise, re-fetch\n    else {\n        _getAll();\n      }\n  }, [response, _getAll]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"There are \", todoList.filter(item => !item.completed).length, \" Items To Complete\")), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TodoForm, {\n    handleSubmit: _addItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TodoList, {\n    list: todoList,\n    handleCompleted: _toggleCompleted,\n    handleDelete: _deleteItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Route, {\n    path: \"/todo/:id\",\n    render: ({\n      match\n    }) => /*#__PURE__*/React.createElement(TodoItem, {\n      item: todoList.find(item => item.id === Number(match.params.id)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ToDo;","map":{"version":3,"sources":["/mnt/c/Users/sazib/desktop/lab38/src/components/todo/todo.js"],"names":["React","useEffect","useState","Route","useFetch","TodoForm","TodoList","TodoItem","todoAPI","ToDo","todoList","setToDoList","request","response","error","isLoading","_addItem","item","addRequest","url","options","method","body","JSON","stringify","_deleteItem","id","deleteRequest","_toggleCompleted","filter","i","completed","updateRequest","_getAll","useCallback","req","length","match","find","Number","params"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport useFetch from '../../hooks/fetch.js';\nimport TodoForm from './form.js';\nimport TodoList from './list.js';\nimport TodoItem from './item.js';\n\nimport './todo.scss';\n\n// Should be in .env as REACT_APP_API_SERVER instead of hard coded\nconst todoAPI = 'https://localhost/api/v1/todos';\n\nconst ToDo = () => {\n  const [todoList, setToDoList] = useState([]);\n\n  // request() is a function from the hook that takes a url and options as a parameter object\n  // response, error are data that the hook sets as state (letting us re-render here) when it's done fetchign data\n  // isLoading is a flag set by the hook to let you change display if we're loading data\n  // eslint-disable-next-line no-unused-vars\n  const { request, response, error, isLoading } = useFetch();\n\n  // Notice how all of the event handlers set a request object and call request() with it?\n  // the hook has a useEffect() that's tied to changes in the request object, so as these\n  // change that bit of state in the hook, api calls happen\n\n  const _addItem = (item) => {\n    const addRequest = {\n      url: todoAPI,\n      options: {\n        method: 'post',\n        body: JSON.stringify(item)\n      }\n    }\n    request(addRequest);\n  };\n\n  const _deleteItem = (id) => {\n    const deleteRequest = {\n      url: `${todoAPI}/${id}`,\n      options: {\n        method: 'delete'\n      }\n    }\n    request(deleteRequest);\n  };\n\n  const _toggleCompleted = id => {\n    let item = todoList.filter(i => i.id === id)[0] || {};\n    item.completed = !item.completed;\n    const updateRequest = {\n      url: `${todoAPI}/${id}`,\n      options: {\n        method: 'put',\n        body: JSON.stringify(item)\n      }\n    }\n    request(updateRequest);\n  };\n\n  const _getAll = React.useCallback(() => {\n    const req = {\n      url: todoAPI,\n      options: {\n        method: 'get'\n      }\n    }\n    request(req);\n  }, [request]);\n\n  // The function to re-fetch data so the display is current\n  // Called on intial load and afer every write operation\n  // On mount ... get the list\n  useEffect(() => {\n    _getAll();\n  }, [_getAll]);\n\n  //  Set the full state if it's in the response or re-fetch anytime the response is updated\n  useEffect(() => {\n    // Anytime we get a list, update our sate\n    if (response.length >= 0) {\n      setToDoList(response);\n    }\n    // Otherwise, re-fetch\n    else {\n      _getAll();\n    }\n  }, [response, _getAll]);\n\n  return (\n    <>\n      <header>\n        <h2>\n          There are {todoList.filter(item => !item.completed).length} Items To Complete\n        </h2>\n      </header>\n\n      <section className=\"todo\">\n\n        <div>\n          <TodoForm handleSubmit={_addItem} />\n        </div>\n\n        <div>\n          <TodoList\n            list={todoList}\n            handleCompleted={_toggleCompleted}\n            handleDelete={_deleteItem}\n          />\n        </div>\n      </section>\n\n      <Route\n        path='/todo/:id'\n        render={({ match }) => (\n          <TodoItem item={todoList.find(item => item.id === Number(match.params.id))} />\n        )} />\n    </>\n  );\n};\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}