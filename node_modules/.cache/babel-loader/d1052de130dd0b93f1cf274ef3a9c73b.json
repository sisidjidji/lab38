{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useFetch = () => {\n  const [requestObject, request] = useState(null);\n  const [response, setResponse] = useState({});\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // Wrap async call in useEffect\n  // this effect runs anytime the requestObject changes\n  //  ... i.e. when the component calls request() with an object, this kicks off\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!requestObject) {\n        return;\n      }\n\n      setIsLoading(true);\n\n      try {\n        requestObject.options.headers = {\n          'Content-Type': 'application/json'\n        };\n        const res = await fetch(requestObject.url, requestObject.options);\n        const json = res.status === 200 && (await res.json());\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchData();\n  }, [requestObject]); // request - function that sets the request object\n  // response - the resonse (this is stored in state, updated after the fetchdata function runs)\n  // error - the resonse (this is stored in state, updated after the fetchdata function runs)\n  // isLoading - boolean to toggle load state, changed during operation of the fetchData function\n\n  return {\n    request,\n    response,\n    error,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/mnt/c/Users/sazib/desktop/lab38/src/hooks/fetch.js"],"names":["useState","useEffect","useFetch","requestObject","request","response","setResponse","error","setError","isLoading","setIsLoading","fetchData","options","headers","res","fetch","url","json","status"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAErB,QAAM,CAACC,aAAD,EAAgBC,OAAhB,IAA2BJ,QAAQ,CAAC,IAAD,CAAzC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C,CALqB,CAOrB;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,SAAS,GAAG,YAAY;AAC5B,UAAI,CAACR,aAAL,EAAoB;AAAE;AAAS;;AAC/BO,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACFP,QAAAA,aAAa,CAACS,OAAd,CAAsBC,OAAtB,GAAgC;AAAE,0BAAgB;AAAlB,SAAhC;AACA,cAAMC,GAAG,GAAG,MAAMC,KAAK,CAACZ,aAAa,CAACa,GAAf,EAAoBb,aAAa,CAACS,OAAlC,CAAvB;AACA,cAAMK,IAAI,GAAGH,GAAG,CAACI,MAAJ,KAAe,GAAf,KAAsB,MAAMJ,GAAG,CAACG,IAAJ,EAA5B,CAAb;AACAX,QAAAA,WAAW,CAACW,IAAD,CAAX;AACAP,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAND,CAME,OAAOH,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,KAZD;;AAaAI,IAAAA,SAAS;AACV,GAfQ,EAeN,CAACR,aAAD,CAfM,CAAT,CAVqB,CA2BrB;AACA;AACA;AACA;;AACA,SAAO;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBE,IAAAA,KAArB;AAA4BE,IAAAA;AAA5B,GAAP;AAED,CAjCD;;AAmCA,eAAeP,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = () => {\n\n  const [requestObject, request] = useState(null);\n  const [response, setResponse] = useState({});\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Wrap async call in useEffect\n  // this effect runs anytime the requestObject changes\n  //  ... i.e. when the component calls request() with an object, this kicks off\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!requestObject) { return; }\n      setIsLoading(true);\n      try {\n        requestObject.options.headers = { 'Content-Type': 'application/json' };\n        const res = await fetch(requestObject.url, requestObject.options);\n        const json = res.status === 200 && await res.json();\n        setResponse(json);\n        setIsLoading(false)\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, [requestObject]);\n\n  // request - function that sets the request object\n  // response - the resonse (this is stored in state, updated after the fetchdata function runs)\n  // error - the resonse (this is stored in state, updated after the fetchdata function runs)\n  // isLoading - boolean to toggle load state, changed during operation of the fetchData function\n  return { request, response, error, isLoading };\n\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}